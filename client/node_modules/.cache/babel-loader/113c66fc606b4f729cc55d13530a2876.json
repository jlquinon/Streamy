{"ast":null,"code":"var _jsxFileName = \"/Users/jorge/Coding/Udemy/Modern-React-With-Redux-2020/streams/client/src/components/streams/StreamShow.js\";\nimport React from \"react\";\nimport flv from \"flv.js\";\nimport { connect } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  componentWillUnmount() {\n    console.log(\"I was unmounted\");\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n\n    const {\n      id\n    } = this.props.match.params;\n    this.player = flv.createPlayer({\n      type: \"flv\",\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: \"100%\"\n      },\n      controls: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, title), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/jorge/Coding/Udemy/Modern-React-With-Redux-2020/streams/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","match","params","id","buildPlayer","componentDidUpdate","componentWillUnmount","console","log","player","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,KAAL,CAAWJ,WAAX,CAAuB,KAAKI,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACA,SAAKC,WAAL;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKD,WAAL;AACD;;AAEDE,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD;;AAEDJ,EAAAA,WAAW,GAAG;AACZ,QAAI,KAAKK,MAAL,IAAe,CAAC,KAAKZ,KAAL,CAAWa,MAA/B,EAAuC;AACrC;AACD;;AAED,UAAM;AAAEP,MAAAA;AAAF,QAAS,KAAKN,KAAL,CAAWI,KAAX,CAAiBC,MAAhC;AAEA,SAAKO,MAAL,GAAclB,GAAG,CAACoB,YAAJ,CAAiB;AAC7BC,MAAAA,IAAI,EAAE,KADuB;AAE7BC,MAAAA,GAAG,EAAG,8BAA6BV,EAAG;AAFT,KAAjB,CAAd;AAIA,SAAKM,MAAL,CAAYK,kBAAZ,CAA+B,KAAKhB,QAAL,CAAciB,OAA7C;AACA,SAAKN,MAAL,CAAYO,IAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKpB,KAAL,CAAWa,MAAhB,EAAwB;AACtB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AAED,UAAM;AAAEQ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyB,KAAKtB,KAAL,CAAWa,MAA1C;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,GAAG,EAAE,KAAKZ,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAAEsB,QAAAA,KAAK,EAAE;AAAT,OAAlC;AAAqD,MAAA,QAAQ,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHF,CADF;AAOD;;AAjDsC;;AAoDzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAAEb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACtB,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACD,CAFD;;AAIA,eAAeX,OAAO,CAAC6B,eAAD,EAAkB;AAAE5B,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React from \"react\";\nimport flv from \"flv.js\";\nimport { connect } from \"react-redux\";\n\nimport { fetchStream } from \"../../actions\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  componentWillUnmount() {\n    console.log(\"I was unmounted\");\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n\n    const { id } = this.props.match.params;\n\n    this.player = flv.createPlayer({\n      type: \"flv\",\n      url: `http://localhost:8000/live/${id}.flv`,\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return <div>Loading...</div>;\n    }\n\n    const { title, description } = this.props.stream;\n\n    return (\n      <div>\n        <video ref={this.videoRef} style={{ width: \"100%\" }} controls />\n        <h1>{title}</h1>\n        <h5>{description}</h5>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { stream: state.streams[ownProps.match.params.id] };\n};\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\n"]},"metadata":{},"sourceType":"module"}